#####Work with rest of data#####
################################
#cutting the time into intervals
#rounded_start - using end time as ceiling, deduct 30minutes off to get floor
df.2<-df.1
df.1$rounded_start<-align.time(df.1$start-30*60, n =1800)
df.1$rounded_end<-align.time(df.1$start,n= 1800)
df.2$rounded_start<-align.time(df.2$end-30*60, n =1800)
df.2$rounded_end<-align.time(df.2$end, n=1800)
df.1$duration<-as.numeric(difftime(df.1$rounded_end,df.1$start,units="mins"))
df.2$duration<-as.numeric(difftime(df.2$end,df.2$rounded_start,units="mins"))
#changing format
df.1$rounded_start<-strftime(df.1$rounded_start, format="%H:%M")
df.1$rounded_end<-strftime(df.1$rounded_end, format="%H:%M")
df.2$rounded_start<-strftime(df.2$rounded_start, format="%H:%M")
df.2$rounded_end<-strftime(df.2$rounded_end, format="%H:%M")
#finding ratio
df.1$time.ratio<-df.1$duration/30
df.2$time.ratio<-df.2$duration/30
df.1$time.interval<-paste(df.1$rounded_start,df.1$rounded_end,sep = "-")
df.2$time.interval<-paste(df.2$rounded_start,df.2$rounded_end,sep = "-")
df.1$start.end<-paste(df.1$start,df.1$time.interval,sep="-")
df.2$start.end<-paste(df.2$start,df.2$time.interval,sep="-")
df.total<-rbind(df.1,df.2)
str(df.total)
df.total<-df.total[,c(19,1:18)]
df.total<-df.total[order(df.total$start.end,df.total$department),]
duplicates<-which(duplicated(df.total$start.end))-1
df.total$duration[duplicates]<-as.numeric(difftime(df.total$end[duplicates],df.total$start[duplicates],units="mins"))
#df.total$time.ratio[duplicates]<-df.total$duration[duplicates]/30
df.total<-df.total[!duplicated(df.total$start.end),]
df.total$time.ratio<-df.total$duration/30
time.intervals.1<-format(seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date()+1), by = "30 min"),
"%H:%M")
time.intervals.2<-c("")
#creating the time-intervals
for(i in 1:length(time.intervals.1)){
if(i == length(time.intervals.1)){
break
}
a<-paste(time.intervals.1[i],time.intervals.1[i+1],sep="-")
time.intervals.2<-append(time.intervals.2,a)
}
time.intervals.2<-time.intervals.2[2:length(time.intervals.2)]
time.intervals.2<-append(c("date","department"),time.intervals.2)
df.total<-df.total[df.total$department!="",]
dept.date<-unique(df.total[,c("department","date_start")])
##Create the dataframe
timing.df<-setNames(data.frame(matrix(ncol = length(time.intervals.2), nrow = nrow(dept.date))), time.intervals.2)
timing.df[,c('department','date')]<-dept.date
timing.df$department.date<-paste(timing.df$department,timing.df$date,sep = '-')
date.dept<-timing.df$department.date
df.total$department.date<-paste(df.total$department,df.total$date_start,sep='-')
timing.df[,4:ncol(timing.df)-1]<-0
colterms<-colnames(timing.df)
##Loop to match and add ratios to the specific department,date,interval
for(i in 1:nrow(df.total)){
b<-grep(df.total$time.interval[i],colterms)
a<-grep(df.total$department.date[i],date.dept)
timing.df[a,b]<-timing.df[a,b]+df.total$time.ratio[i]
}
timing.df<-timing.df[order(timing.df$department,timing.df$date),]
colSums(timing.df[,3:(ncol(timing.df)-1)])
str(timing.df)
View(timing.df)
write.csv(timing.df,'task-per-interval.csv')
View(timing.df[timing.df$department=="2A/DSW",])
colnames(deploy.df)
deploy.df<-read.csv('/Users/LinChun/Desktop/Projects/NUH/Dataset/merged_dataset/DeploymentByDeptDate.csv',stringsAsFactors =F )
deploy.df<-deploy.df[,2:ncol(deploy.df)]
deploy.df<-deploy.df[,c(2,1,3:ncol(deploy.df))]
colnames(deploy.df)<-colnames(timing.df)[-ncol(timing.df)]
deploy.df[,3:ncol(deploy.df)]<-lapply(deploy.df[,3:ncol(deploy.df)],as.numeric)
colnames(deploy.df)
unique(timing.df$department)
unique(deploy.df$department)
setwd('/Users/LinChun/Desktop/Projects/NUH')
library(tidyverse)
library(lubridate)
library(magrittr)
library(xts)
## Cleaning the original dataset ##
df<- read.csv('/Users/LinChun/Desktop/Projects/NUH/Dataset/merged_dataset/merged_NUH_dataset_v2.csv',stringsAsFactors = F)
#colnames(df)
df<-df[,c("department","create","porter","destination", "job","source","start","end","status","CP")]
#convert into time
df$create<-as.POSIXct(df$create, format="%Y-%m-%d %H:%M:%S")
df$start<-as.POSIXct(df$start, format="%Y-%m-%d %H:%M:%S")
df$end<-as.POSIXct(df$end, format="%Y-%m-%d %H:%M:%S")
df$duration<-as.numeric(difftime(df$end,df$start,units = "mins"))
#View(df)
df.1<-df
#assumed cancelled task - 10minutes
for(i in 1:nrow(df.1)){
if(df.1$status[i]=="Cancelled"){
if(df.1$porter[i]==df.1$porter[i+1]){
if(as.numeric(difftime(df.1$start[i+1],df.1$start[i],units="mins")) > 10){
df.1$duration[i]<-10
}else{
df.1$duration[i]<-as.numeric(difftime(df.1$start[i+1],df.1$start[i],units="mins"))
}
}
next
}
next
}
#those that still has NA -> replaced with 0
df.1$duration[which(is.na(df.1$duration))]<-0
#add date for start and end
df.1$date_start<-as.Date(df.1$start)
df.1$date_end<-as.Date(df.1$end)
#Method 1: Calculate on-task duration/Total Task time
df.1$end[which(is.na(df.1$end))]<-df.1$start[which(is.na(df.1$end))] + df.1$duration[which(is.na(df.1$end))]
df.1$flag<-0
#for tasks that are >45minutes, convert end_time to start_time of next task
for(i in 1:nrow(df.1)){
if(df.1$duration[i]>45){
if(df.1$porter[i+1]==df.1$porter[i]){
if(df.1$date_start[i+1]==df.1$date_end[i]){
df.1$flag[i]<-1
next
}
else{
df.1$flag[i]<-1
next
}}
else{
df.1$flag[i]<-1
next
}}
else{
next
}}
#################################
#####Test on specific porter#####
#################################
#Focus just on one porter, for a specific day
str(df.1)
test.df <-df.1 %>% select(department,start,end,porter,duration,date_start,date_end) %>% filter(porter == "A Jananee",date_start=="2017-08-27")
test.df.2<-test.df
#cutting the time into intervals
#rounded_start - using end time as ceiling, deduct 30minutes off to get floor
test.df$rounded_start<-align.time(test.df$start-30*60, n =1800)
test.df$rounded_end<-align.time(test.df$start,n= 1800)
test.df.2$rounded_start<-align.time(test.df.2$end-30*60, n =1800)
test.df.2$rounded_end<-align.time(test.df.2$end, n=1800)
test.df$duration<-as.numeric(difftime(test.df$rounded_end,test.df$start,units="mins"))
test.df.2$duration<-as.numeric(difftime(test.df.2$end,test.df.2$rounded_start,units="mins"))
#changing format
test.df$rounded_start<-strftime(test.df$rounded_start, format="%H:%M")
test.df$rounded_end<-strftime(test.df$rounded_end, format="%H:%M")
test.df.2$rounded_start<-strftime(test.df.2$rounded_start, format="%H:%M")
test.df.2$rounded_end<-strftime(test.df.2$rounded_end, format="%H:%M")
#finding ratio
test.df$time.ratio<-test.df$duration/30
test.df.2$time.ratio<-test.df.2$duration/30
test.df$time.interval<-paste(test.df$rounded_start,test.df$rounded_end,sep = "-")
test.df.2$time.interval<-paste(test.df.2$rounded_start,test.df.2$rounded_end,sep = "-")
test.df$start.end<-paste(test.df$start,test.df$time.interval,sep="-")
test.df.2$start.end<-paste(test.df.2$start,test.df.2$time.interval,sep="-")
test.total<-rbind(test.df,test.df.2)
str(test.total)
test.total<-test.total[,c(12,1:11)]
test.total<-test.total[order(test.total$start.end,test.total$department),]
duplicates<-which(duplicated(test.total$start.end))-1
test.total$duration[duplicates]<-as.numeric(difftime(test.total$end[duplicates],test.total$start[duplicates],units="mins"))
#View(test.total[!duplicated(test.total$start.end),])
#drop the times
########################
#####Test Succeeded#####
########################
################################
#####Work with rest of data#####
################################
#cutting the time into intervals
#rounded_start - using end time as ceiling, deduct 30minutes off to get floor
df.2<-df.1
df.1$rounded_start<-align.time(df.1$start-30*60, n =1800)
df.1$rounded_end<-align.time(df.1$start,n= 1800)
df.2$rounded_start<-align.time(df.2$end-30*60, n =1800)
df.2$rounded_end<-align.time(df.2$end, n=1800)
df.1$duration<-as.numeric(difftime(df.1$rounded_end,df.1$start,units="mins"))
df.2$duration<-as.numeric(difftime(df.2$end,df.2$rounded_start,units="mins"))
#changing format
df.1$rounded_start<-strftime(df.1$rounded_start, format="%H:%M")
df.1$rounded_end<-strftime(df.1$rounded_end, format="%H:%M")
df.2$rounded_start<-strftime(df.2$rounded_start, format="%H:%M")
df.2$rounded_end<-strftime(df.2$rounded_end, format="%H:%M")
#finding ratio
df.1$time.ratio<-df.1$duration/30
df.2$time.ratio<-df.2$duration/30
df.1$time.interval<-paste(df.1$rounded_start,df.1$rounded_end,sep = "-")
df.2$time.interval<-paste(df.2$rounded_start,df.2$rounded_end,sep = "-")
df.1$start.end<-paste(df.1$start,df.1$time.interval,sep="-")
df.2$start.end<-paste(df.2$start,df.2$time.interval,sep="-")
df.total<-rbind(df.1,df.2)
str(df.total)
df.total<-df.total[,c(19,1:18)]
df.total<-df.total[order(df.total$start.end,df.total$department),]
duplicates<-which(duplicated(df.total$start.end))-1
df.total$duration[duplicates]<-as.numeric(difftime(df.total$end[duplicates],df.total$start[duplicates],units="mins"))
df.total$time.ratio[duplicates]<-df.total$duration[duplicates]/30
df.total<-df.total[!duplicated(df.total$start.end),]
#df.total$time.ratio<-df.total$duration/30
time.intervals.1<-format(seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date()+1), by = "30 min"),
"%H:%M")
time.intervals.2<-c("")
#creating the time-intervals
for(i in 1:length(time.intervals.1)){
if(i == length(time.intervals.1)){
break
}
a<-paste(time.intervals.1[i],time.intervals.1[i+1],sep="-")
time.intervals.2<-append(time.intervals.2,a)
}
time.intervals.2<-time.intervals.2[2:length(time.intervals.2)]
time.intervals.2<-append(c("date","department"),time.intervals.2)
df.total<-df.total[df.total$department!="",]
dept.date<-unique(df.total[,c("department","date_start")])
##Create the dataframe
timing.df<-setNames(data.frame(matrix(ncol = length(time.intervals.2), nrow = nrow(dept.date))), time.intervals.2)
timing.df[,c('department','date')]<-dept.date
timing.df$department.date<-paste(timing.df$department,timing.df$date,sep = '-')
date.dept<-timing.df$department.date
df.total$department.date<-paste(df.total$department,df.total$date_start,sep='-')
timing.df[,4:ncol(timing.df)-1]<-0
colterms<-colnames(timing.df)
##Loop to match and add ratios to the specific department,date,interval
for(i in 1:nrow(df.total)){
b<-grep(df.total$time.interval[i],colterms)
a<-grep(df.total$department.date[i],date.dept)
timing.df[a,b]<-timing.df[a,b]+df.total$time.ratio[i]
}
timing.df<-timing.df[order(timing.df$department,timing.df$date),]
colSums(timing.df[,3:(ncol(timing.df)-1)])
str(timing.df)
View(timing.df)
write.csv(timing.df,'task-per-interval.csv')
View(timing.df[timing.df$department=="2A/DSW",])
setwd('/Users/LinChun/Desktop/Projects/NUH')
library(tidyverse)
library(lubridate)
library(magrittr)
library(xts)
## Cleaning the original dataset ##
df<- read.csv('/Users/LinChun/Desktop/Projects/NUH/Dataset/merged_dataset/merged_NUH_dataset_v2.csv',stringsAsFactors = F)
#colnames(df)
df<-df[,c("department","create","porter","destination", "job","source","start","end","status","CP")]
#convert into time
df$create<-as.POSIXct(df$create, format="%Y-%m-%d %H:%M:%S")
df$start<-as.POSIXct(df$start, format="%Y-%m-%d %H:%M:%S")
df$end<-as.POSIXct(df$end, format="%Y-%m-%d %H:%M:%S")
df$duration<-as.numeric(difftime(df$end,df$start,units = "mins"))
#View(df)
df.1<-df
#assumed cancelled task - 10minutes
for(i in 1:nrow(df.1)){
if(df.1$status[i]=="Cancelled"){
if(df.1$porter[i]==df.1$porter[i+1]){
if(as.numeric(difftime(df.1$start[i+1],df.1$start[i],units="mins")) > 10){
df.1$duration[i]<-10
}else{
df.1$duration[i]<-as.numeric(difftime(df.1$start[i+1],df.1$start[i],units="mins"))
}
}
next
}
next
}
#those that still has NA -> replaced with 0
df.1$duration[which(is.na(df.1$duration))]<-0
#add date for start and end
df.1$date_start<-as.Date(df.1$start)
df.1$date_end<-as.Date(df.1$end)
#Method 1: Calculate on-task duration/Total Task time
df.1$end[which(is.na(df.1$end))]<-df.1$start[which(is.na(df.1$end))] + df.1$duration[which(is.na(df.1$end))]
df.1$flag<-0
#for tasks that are >45minutes, convert end_time to start_time of next task
for(i in 1:nrow(df.1)){
if(df.1$duration[i]>45){
if(df.1$porter[i+1]==df.1$porter[i]){
if(df.1$date_start[i+1]==df.1$date_end[i]){
df.1$flag[i]<-1
next
}
else{
df.1$flag[i]<-1
next
}}
else{
df.1$flag[i]<-1
next
}}
else{
next
}}
#################################
#####Test on specific porter#####
#################################
#Focus just on one porter, for a specific day
str(df.1)
test.df <-df.1 %>% select(department,start,end,porter,duration,date_start,date_end) %>% filter(porter == "A Jananee",date_start=="2017-08-27")
test.df.2<-test.df
#cutting the time into intervals
#rounded_start - using end time as ceiling, deduct 30minutes off to get floor
test.df$rounded_start<-align.time(test.df$start-30*60, n =1800)
test.df$rounded_end<-align.time(test.df$start,n= 1800)
test.df.2$rounded_start<-align.time(test.df.2$end-30*60, n =1800)
test.df.2$rounded_end<-align.time(test.df.2$end, n=1800)
test.df$duration<-as.numeric(difftime(test.df$rounded_end,test.df$start,units="mins"))
test.df.2$duration<-as.numeric(difftime(test.df.2$end,test.df.2$rounded_start,units="mins"))
#changing format
test.df$rounded_start<-strftime(test.df$rounded_start, format="%H:%M")
test.df$rounded_end<-strftime(test.df$rounded_end, format="%H:%M")
test.df.2$rounded_start<-strftime(test.df.2$rounded_start, format="%H:%M")
test.df.2$rounded_end<-strftime(test.df.2$rounded_end, format="%H:%M")
#finding ratio
test.df$time.ratio<-test.df$duration/30
test.df.2$time.ratio<-test.df.2$duration/30
test.df$time.interval<-paste(test.df$rounded_start,test.df$rounded_end,sep = "-")
test.df.2$time.interval<-paste(test.df.2$rounded_start,test.df.2$rounded_end,sep = "-")
test.df$start.end<-paste(test.df$start,test.df$time.interval,sep="-")
test.df.2$start.end<-paste(test.df.2$start,test.df.2$time.interval,sep="-")
test.total<-rbind(test.df,test.df.2)
str(test.total)
test.total<-test.total[,c(12,1:11)]
test.total<-test.total[order(test.total$start.end,test.total$department),]
duplicates<-which(duplicated(test.total$start.end))-1
test.total$duration[duplicates]<-as.numeric(difftime(test.total$end[duplicates],test.total$start[duplicates],units="mins"))
#View(test.total[!duplicated(test.total$start.end),])
#drop the times
########################
#####Test Succeeded#####
########################
################################
#####Work with rest of data#####
################################
#cutting the time into intervals
#rounded_start - using end time as ceiling, deduct 30minutes off to get floor
df.2<-df.1
df.1$rounded_start<-align.time(df.1$start-30*60, n =1800)
df.1$rounded_end<-align.time(df.1$start,n= 1800)
df.2$rounded_start<-align.time(df.2$end-30*60, n =1800)
df.2$rounded_end<-align.time(df.2$end, n=1800)
df.1$duration<-as.numeric(difftime(df.1$rounded_end,df.1$start,units="mins"))
df.2$duration<-as.numeric(difftime(df.2$end,df.2$rounded_start,units="mins"))
#changing format
df.1$rounded_start<-strftime(df.1$rounded_start, format="%H:%M")
df.1$rounded_end<-strftime(df.1$rounded_end, format="%H:%M")
df.2$rounded_start<-strftime(df.2$rounded_start, format="%H:%M")
df.2$rounded_end<-strftime(df.2$rounded_end, format="%H:%M")
#finding ratio
df.1$time.ratio<-df.1$duration/30
df.2$time.ratio<-df.2$duration/30
df.1$time.interval<-paste(df.1$rounded_start,df.1$rounded_end,sep = "-")
df.2$time.interval<-paste(df.2$rounded_start,df.2$rounded_end,sep = "-")
df.1$start.end<-paste(df.1$start,df.1$time.interval,sep="-")
df.2$start.end<-paste(df.2$start,df.2$time.interval,sep="-")
df.total<-rbind(df.1,df.2)
str(df.total)
df.total<-df.total[,c(19,1:18)]
df.total<-df.total[order(df.total$start.end,df.total$department),]
duplicates<-which(duplicated(df.total$start.end))-1
df.total$duration[duplicates]<-as.numeric(difftime(df.total$end[duplicates],df.total$start[duplicates],units="mins"))
df.total$time.ratio[duplicates]<-df.total$duration[duplicates]/30
df.total<-df.total[!duplicated(df.total$start.end),]
#df.total$time.ratio<-df.total$duration/30
time.intervals.1<-format(seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date()+1), by = "30 min"),
"%H:%M")
time.intervals.2<-c("")
#creating the time-intervals
for(i in 1:length(time.intervals.1)){
if(i == length(time.intervals.1)){
break
}
a<-paste(time.intervals.1[i],time.intervals.1[i+1],sep="-")
time.intervals.2<-append(time.intervals.2,a)
}
time.intervals.2<-time.intervals.2[2:length(time.intervals.2)]
time.intervals.2<-append(c("date","department"),time.intervals.2)
df.total<-df.total[df.total$department!="",]
dept.date<-unique(df.total[,c("department","date_start")])
##Create the dataframe
timing.df<-setNames(data.frame(matrix(ncol = length(time.intervals.2), nrow = nrow(dept.date))), time.intervals.2)
timing.df[,c('department','date')]<-dept.date
timing.df$department.date<-paste(timing.df$department,timing.df$date,sep = '-')
date.dept<-timing.df$department.date
df.total$department.date<-paste(df.total$department,df.total$date_start,sep='-')
timing.df[,4:ncol(timing.df)-1]<-0
colterms<-colnames(timing.df)
##Loop to match and add ratios to the specific department,date,interval
for(i in 1:nrow(df.total)){
b<-grep(df.total$time.interval[i],colterms)
a<-grep(df.total$department.date[i],date.dept)
timing.df[a,b]<-timing.df[a,b]+df.total$time.ratio[i]
}
timing.df<-timing.df[order(timing.df$department,timing.df$date),]
colSums(timing.df[,3:(ncol(timing.df)-1)])
#str(timing.df)
#View(timing.df)
write.csv(timing.df,'task-per-interval.csv')
getwd()
setwd('/Users/LinChun/Desktop/Projects/NUH')
setwd('/Users/Linchun/dsc3214/')
list.files()
setwd('/Users/Linchun/dsc3214/pre-req-clu/')
list.files()
df<-read.csv('pre_req_df.csv',stringsAsFactors = F)
View(df)
colnames(df)
rownames(df)
View(df)
df[,1]
df[1,1]
rownames(df)<-df[,1]
rownames(df)
colnames(df)
df[,-1]
df[,2:ncol(df)]
df<-df[,2:ncol(df)]
View(df)
df[1,1]
head(df)
setwd('/Users/Linchun/dsc3214/pre-req-clu/')
df<-read.csv('pre_clu_df.csv',stringsAsFactors = F)
View(df)
rownames(df)<-df[,1]
df<-df[,2:ncol(df)]
head(df)
colnames(df)
rownames(df)
rownames(df) %in% colnames(df)
for (i in 1:length(rownames)){
df[i,i]<-2
}
View(df)
setwd('/Users/Linchun/dsc3214/pre-req-clu/')
df<-read.csv('pre_clu_df.csv',stringsAsFactors = F)
df.1<-df
rownames(df)<-df[,1]
#View(df)
df<-df[,2:ncol(df)]
head(df)
#Checking
rownames(df) %in% colnames(df)
for (i in 1:length(rownames)){
df[i,i]<-2
}
df == 2
which(df == 2)
setwd('/Users/Linchun/dsc3214/pre-req-clu/')
df<-read.csv('pre_clu_df.csv',stringsAsFactors = F)
df.1<-df
rownames(df)<-df[,1]
#View(df)
df<-df[,2:ncol(df)]
head(df)
#Checking
rownames(df) %in% colnames(df)
for (i in 1:length(rownames)){
df[i,i]<-2
print(df[i,i],"\n")
}
setwd('/Users/Linchun/dsc3214/pre-req-clu/')
df<-read.csv('pre_clu_df.csv',stringsAsFactors = F)
df.1<-df
rownames(df)<-df[,1]
#View(df)
df<-df[,2:ncol(df)]
head(df)
#Checking
rownames(df) %in% colnames(df)
for (i in 1:length(rownames)){
df[i,i]<-2
cat(df[i,i],"\n")
}
length(rownames(df))
df[121,121]
for (i in 1:121){
df[i,i]<-2
cat(df[i,i],"\n")
}
setwd('/Users/Linchun/dsc3214/pre-req-clu/')
df<-read.csv('pre_clu_df.csv',stringsAsFactors = F)
df.1<-df
rownames(df)<-df[,1]
#View(df)
df<-df[,2:ncol(df)]
head(df)
#Checking
rownames(df) %in% colnames(df)
numrow<-length(rownames(df))
for (i in 1:numrow){
df[i,i]<-2
cat(df[i,i],"\n")
}
View(df)
setwd('/Users/Linchun/dsc3214/pre-req-clu/')
df<-read.csv('pre_clu_df.csv',stringsAsFactors = F)
df.1<-df
rownames(df)<-df[,1]
#View(df)
df<-df[,2:ncol(df)]
head(df)
#Checking
rownames(df) %in% colnames(df)
numrow<-length(rownames(df))
for (i in 1:numrow){
df[i,i]<-0
cat(df[i,i],"\n")
}
write.csv(df,"pre_clu_df.csv")
